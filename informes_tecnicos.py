import streamlit as st
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch
import io
from datetime import datetime

# Configuraci√≥n de credenciales
info = st.secrets["google_service_account"]
scope = ['https://www.googleapis.com/auth/spreadsheets',
         'https://www.googleapis.com/auth/drive']
credenciales = ServiceAccountCredentials.from_json_keyfile_dict(info, scope)
cliente = gspread.authorize(credenciales)
drive_service = build('drive', 'v3', credentials=credenciales)
folder2 = st.secrets["google_drive"]["qr_folder_id2"]

def subir_archivo_drive(pdf_buffer, nombre_archivo):
    """Sube el informe PDF a Google Drive"""
    try:
        file_metadata = {
            'name': nombre_archivo,
            'parents': [folder2],
            'mimeType': 'application/pdf'
        }

        pdf_buffer.seek(0)
        media = MediaIoBaseUpload(pdf_buffer, mimetype='application/pdf')

        file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()

        return file.get('id')

    except Exception as e:
        st.error(f"Error subiendo archivo a Drive: {e}")
        return None

def generar_pdf_informe(datos_informe):
    """Genera un PDF del informe t√©cnico"""
    buffer = io.BytesIO()
    
    # Crear documento PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                           rightMargin=72, leftMargin=72,
                           topMargin=72, bottomMargin=18)
    
    # Obtener estilos
    styles = getSampleStyleSheet()
    
    # Crear contenido
    story = []
    
    # T√≠tulo
    titulo_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=1,  # Centrado
        textColor=colors.darkred
    )
    
    story.append(Paragraph("INFORME T√âCNICO", titulo_style))
    story.append(Spacer(1, 12))
    
    # Informaci√≥n del header
    header_data = [
        ['T√©cnico:', datos_informe['tecnico']],
        ['Fecha:', datos_informe['fecha']],
        ['Equipo:', datos_informe['equipo']],
        ['√Årea:', datos_informe['area']],
        ['Tipo de Informe:', datos_informe['tipo']]
    ]
    
    header_table = Table(header_data, colWidths=[2*inch, 4*inch])
    header_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('BACKGROUND', (1, 0), (1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(header_table)
    story.append(Spacer(1, 12))
    
    # Descripci√≥n del problema
    story.append(Paragraph("<b>Descripci√≥n del Problema:</b>", styles['Heading2']))
    story.append(Paragraph(datos_informe['descripcion'], styles['Normal']))
    story.append(Spacer(1, 12))
    
    # Diagn√≥stico
    story.append(Paragraph("<b>Diagn√≥stico:</b>", styles['Heading2']))
    story.append(Paragraph(datos_informe['diagnostico'], styles['Normal']))
    story.append(Spacer(1, 12))
    
    # Acciones realizadas
    story.append(Paragraph("<b>Acciones Realizadas:</b>", styles['Heading2']))
    story.append(Paragraph(datos_informe['acciones'], styles['Normal']))
    story.append(Spacer(1, 12))
    
    # Recomendaciones
    if datos_informe.get('recomendaciones'):
        story.append(Paragraph("<b>Recomendaciones:</b>", styles['Heading2']))
        story.append(Paragraph(datos_informe['recomendaciones'], styles['Normal']))
        story.append(Spacer(1, 12))
    
    # Firma
    story.append(Spacer(1, 24))
    firma_data = [
        ['_' * 30, '_' * 30],
        ['T√©cnico Responsable', 'Supervisor']
    ]
    
    firma_table = Table(firma_data, colWidths=[3*inch, 3*inch])
    firma_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 1), (-1, 1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('TOPPADDING', (0, 1), (-1, 1), 12),
    ]))
    
    story.append(firma_table)
    
    # Construir PDF
    doc.build(story)
    buffer.seek(0)
    return buffer

def subir_informe_drive():
    """Funci√≥n principal para mostrar la interfaz de informes t√©cnicos"""
    st.title("üìÑ Informes T√©cnicos")
    
    # Obtener informaci√≥n del usuario desde session_state
    tecnico = st.session_state.get('name', 'Usuario')
    rol_nombre = st.session_state.get('rol_nombre', 'Sin rol')
    email = st.session_state.get('email', 'Sin email')
    
    # Mostrar informaci√≥n del t√©cnico
    st.info(f"üë§ **T√©cnico:** {tecnico} ({rol_nombre})")
    
    # Formulario para crear informe
    with st.form("formulario_informe"):
        st.subheader("üìù Crear Nuevo Informe")
        
        col1, col2 = st.columns(2)
        
        with col1:
            equipo = st.text_input("üè• Equipo M√©dico", placeholder="Ej: Ventilador Puritan Bennett")
            area = st.selectbox("üìç √Årea", [
                "UCI", "Emergencia", "Quir√≥fano", "Hospitalizaci√≥n", 
                "Laboratorio", "Rayos X", "Farmacia", "Otro"
            ])
            tipo_informe = st.selectbox("üìã Tipo de Informe", [
                "Mantenimiento Preventivo",
                "Mantenimiento Correctivo", 
                "Calibraci√≥n",
                "Inspecci√≥n",
                "Reparaci√≥n",
                "Otro"
            ])
        
        with col2:
            fecha = st.date_input("üìÖ Fecha del Informe", datetime.now().date())
            prioridad = st.selectbox("‚ö†Ô∏è Prioridad", ["Baja", "Media", "Alta", "Cr√≠tica"])
            estado = st.selectbox("üìä Estado", ["Completado", "En Proceso", "Pendiente"])
        
        # Campos de texto
        descripcion = st.text_area("üìù Descripci√≥n del Problema", 
                                 placeholder="Describe detalladamente el problema encontrado...",
                                 height=100)
        
        diagnostico = st.text_area("üîç Diagn√≥stico", 
                                 placeholder="An√°lisis t√©cnico del problema...",
                                 height=100)
        
        acciones = st.text_area("üîß Acciones Realizadas", 
                              placeholder="Detalla las acciones tomadas para resolver el problema...",
                              height=100)
        
        recomendaciones = st.text_area("üí° Recomendaciones", 
                                     placeholder="Recomendaciones para prevenir futuros problemas...",
                                     height=80)
        
        # Bot√≥n para generar informe
        submitted = st.form_submit_button("üì§ Generar y Subir Informe", type="primary")
        
        if submitted:
            # Validar campos obligatorios
            if not all([equipo, area, descripcion, diagnostico, acciones]):
                st.error("‚ùå Por favor completa todos los campos obligatorios (Equipo, √Årea, Descripci√≥n, Diagn√≥stico, Acciones)")
                return
            
            # Preparar datos del informe
            datos_informe = {
                'tecnico': tecnico,
                'email': email,
                'fecha': fecha.strftime('%d/%m/%Y'),
                'equipo': equipo,
                'area': area,
                'tipo': tipo_informe,
                'prioridad': prioridad,
                'estado': estado,
                'descripcion': descripcion,
                'diagnostico': diagnostico,
                'acciones': acciones,
                'recomendaciones': recomendaciones
            }
            
            try:
                # Generar PDF
                with st.spinner('üìÑ Generando informe PDF...'):
                    pdf_buffer = generar_pdf_informe(datos_informe)
                
                # Crear nombre del archivo
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                nombre_archivo = f"Informe_{equipo.replace(' ', '_')}_{timestamp}.pdf"
                
                # Subir a Google Drive
                with st.spinner('‚òÅÔ∏è Subiendo a Google Drive...'):
                    file_id = subir_archivo_drive(pdf_buffer, nombre_archivo)
                
                if file_id:
                    st.success("‚úÖ ¬°Informe generado y subido exitosamente!")
                    st.info(f"üìé **Archivo:** {nombre_archivo}")
                    st.info(f"üÜî **ID en Drive:** {file_id}")
                    
                    # Mostrar preview del PDF
                    st.download_button(
                        label="üì• Descargar PDF",
                        data=pdf_buffer.getvalue(),
                        file_name=nombre_archivo,
                        mime="application/pdf"
                    )
                else:
                    st.error("‚ùå Error al subir el archivo a Google Drive")
                    
            except Exception as e:
                st.error(f"‚ùå Error al procesar el informe: {str(e)}")
    
    # Secci√≥n de informes recientes (placeholder)
    st.markdown("---")
    st.subheader("üìö Mis Informes Recientes")
    st.info("üîÑ Funcionalidad en desarrollo - Aqu√≠ se mostrar√°n tus informes anteriores")

# Esta es la funci√≥n que se llama desde main.py
def mostrar_informes_tecnicos():
    """Funci√≥n de compatibilidad para main.py"""
    subir_informe_drive()